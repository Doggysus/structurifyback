plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version

def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings "net.fabricmc:yarn:${property('yarn_mappings')}:v2"

	// Core dependencies
	modImplementation "net.fabricmc:fabric-loader:${property('fabric_loader_version')}"
	modApi "net.fabricmc.fabric-api:fabric-api:${property('fabric_api_version')}"

	// Mod menu (https://modrinth.com/mod/modmenu)
	// modImplementation("com.terraformersmc:modmenu:${property('mod_menu_version')}") { transitive = false }

	// YetAnotherConfigLib (https://docs.isxander.dev/yet-another-config-lib)
	modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:${property('yacl_version')}"

	// Compat
	// modCompileOnly ("curse.maven:global-datapacks-594773:4706699")
	// modCompileOnly ("curse.maven:drp-global-datapack-317134:4570601")

	common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
	shadowBundle project(path: ":common:$subproject", configuration: 'transformProductionFabric')
}

java {
	withSourcesJar()
}

processResources {
	inputs.property 'modId', mod_id
	inputs.property 'modName', mod_name
	inputs.property 'modDescription', mod_description
	inputs.property 'modVersion', mod_version
	inputs.property 'modAuthor', mod_author
	inputs.property "minecraftVersion", min_minecraft_version
	inputs.property "fabricLoaderVersion", fabric_loader_version
	inputs.property "fabricApiVersion", fabric_api_version

	filesMatching("fabric.mod.json") {
		expand([
			'modId'              : mod_id,
			'modName'            : mod_name,
			'modDescription'     : mod_description,
			'modVersion'         : mod_version,
			'modAuthor'          : mod_author,
			"minecraftVersion"   : min_minecraft_version,
			"fabricLoaderVersion": fabric_loader_version,
			"fabricApiVersion"   : fabric_api_version
		])
	}
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

remapJar {
	input.set shadowJar.archiveFile
}

repositories {
	maven {
		name 'CurseForge'
		url "https://www.cursemaven.com"
	}

	maven {
		name 'Modrinth'
		url 'https://api.modrinth.com/maven'
	}

	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases'
	}

	maven {
		name = "TerraformersMC"
		url "https://maven.terraformersmc.com/releases/"
	}

	// NeoForge
	maven { url 'https://maven.neoforged.net/releases/' }

	// Mod Menu.
	maven { url 'https://maven.terraformersmc.com' }

	// Jitpack for Mixin Extras.
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup 'com.github.llamalad7'
		}
	}

	// YACL
	maven { url "https://maven.isxander.dev/releases" }

	// YACL dep
	maven {
		name = 'kotlinforforge'
		url = 'https://thedarkcolour.github.io/KotlinForForge/'
	}

	// Mod Menu
	maven { url "https://maven.terraformersmc.com/releases" }
	maven  { url "https://maven.terraformersmc.com" }
	maven  { url "https://maven.isxander.dev/releases" }
	maven  { url "https://maven.isxander.dev/snapshots" }
	maven  { url "https://maven.quiltmc.org/repository/release" }
	maven  { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	maven  { url "https://maven.neoforged.net/releases/" }
}