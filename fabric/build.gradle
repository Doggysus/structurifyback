plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version
def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}
def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

base {
	archivesName.set("${mod_id}-fabric-mc${minecraftVersion}-${mod_version}")
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	silentMojangMappingsLicense()

	runConfigs.all {
		ideConfigGenerated true
	}
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings loom.layered {
		it.mappings "net.fabricmc:yarn:${prop('yarn_mappings')}:v2"
		if (stonecutter.compare(minecraftVersion, '1.20.4') == 0) {
			it.mappings "dev.architectury:yarn-mappings-patch-forge:${prop('yarn_mappings_patch')}"
		} else if (stonecutter.compare(minecraftVersion, '1.20.6') >= 0) {
			it.mappings "dev.architectury:yarn-mappings-patch-neoforge:${prop('yarn_mappings_patch')}"
		}
	}

	// Core dependencies
	modImplementation "net.fabricmc:fabric-loader:${prop('fabric_loader_version')}"
	modApi "net.fabricmc.fabric-api:fabric-api:${prop('fabric_api_version')}"

	// Required client
	// YetAnotherConfigLib (https://docs.isxander.dev/yet-another-config-lib)
	if (minecraftVersion == '1.20.2') {
		modImplementation(modrinth("yacl", "${prop('yacl_version')}-fabric"))
	} else {
		modImplementation("dev.isxander:yet-another-config-lib:${prop('yacl_version')}-fabric")
	}

	// Optional client
	// Mod menu (https://modrinth.com/mod/modmenu)
	modImplementation("com.terraformersmc:modmenu:${prop('mod_menu_version')}") { transitive = false }

	// Compat
	if (minecraftVersion == '1.20.1') {
		modCompileOnly("curse.maven:drp-global-datapack-317134:4570601")
		modCompileOnly(modRuntimeOnly("curse.maven:global-datapacks-594773:4706699"))
	} else if (minecraftVersion == '1.20.2') {
		modCompileOnly("curse.maven:drp-global-datapack-317134:5374072")
		modCompileOnly(modRuntimeOnly("curse.maven:global-datapacks-594773:4923994"))
	} else if (minecraftVersion == '1.20.4') {
		modCompileOnly("curse.maven:drp-global-datapack-317134:5374072")
	}

	modCompileOnly(modRuntimeOnly(group: 'com.electronwill.night-config', name: 'core', version: '3.6.5'))
	modCompileOnly(modRuntimeOnly(group: 'com.electronwill.night-config', name: 'toml', version: '3.6.5'))

	common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
	shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionFabric')) { transitive false }
}

processResources {
	inputs.property 'modId', mod_id
	inputs.property 'modName', mod_name
	inputs.property 'modDescription', mod_description
	inputs.property 'modVersion', mod_version
	inputs.property 'modAuthor', mod_author
	inputs.property "minecraftVersion", prop('min_minecraft_version')
	inputs.property "fabricLoaderVersion", prop('fabric_loader_version')
	inputs.property "fabricApiVersion", prop('fabric_api_version')

	filesMatching("fabric.mod.json") {
		expand([
			'modId'              : mod_id,
			'modName'            : mod_name,
			'modDescription'     : mod_description,
			'modVersion'         : mod_version,
			'modAuthor'          : mod_author,
			"minecraftVersion"   : prop('min_minecraft_version'),
			"fabricLoaderVersion": prop('fabric_loader_version'),
			"fabricApiVersion"   : prop('fabric_api_version')
		])
	}
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

jar {
	archiveClassifier.set("dev")
}

remapJar {
	input.set shadowJar.archiveFile
}

java {
	withSourcesJar()

	def javaVersion = (stonecutter.compare(stonecutter.current.version, "1.20.6") >= 0) ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

tasks.withType(JavaCompile).configureEach {
	def releaseVersion = (stonecutter.compare(stonecutter.current.version, "1.20.6") >= 0) ? 21 : 17;
	it.options.release = releaseVersion
}

repositories {
	// CurseForge
	maven { url "https://www.cursemaven.com" }

	// YACL
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.isxander.dev/snapshots" }
	maven { url 'https://thedarkcolour.github.io/KotlinForForge/' }
	maven { url "https://maven.quiltmc.org/repository/release" }

	// Mod Menu.
	maven { url 'https://maven.terraformersmc.com/releases/' }

	// Mixin Extras.
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup 'com.github.llamalad7'
		}
	}

	// Modrinth
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup("maven.modrinth")
		}
	}

	// Random
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

if(stonecutter.current.isActive) {
	rootProject.tasks.register("buildActiveFabric") {
		group = "project"
		dependsOn(tasks.named("build"))
	}
}