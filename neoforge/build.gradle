plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def currentRootVersion = getRootProject().stonecutter.current.version;
def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version
def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}
def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

base {
	archivesName.set("${mod_id}-neoforge-mc${minecraftVersion}-${mod_version}")
}

architectury {
	platformSetupLoomIde()
	neoForge()
}


loom {
	silentMojangMappingsLicense()

	accessWidenerPath.set(project(":common:$subproject").loom.accessWidenerPath)

	runConfigs.all {
		ideConfigGenerated true
	}
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings loom.layered {
		it.mappings "net.fabricmc:yarn:${prop('yarn_mappings')}:v2"
		if (stonecutter.compare(minecraftVersion, '1.20.6') < 0) {
			it.mappings "dev.architectury:yarn-mappings-patch-forge:${prop('yarn_mappings_patch')}"
		} else {
			it.mappings "dev.architectury:yarn-mappings-patch-neoforge:${prop('yarn_mappings_patch')}"
		}
	}

	neoForge "net.neoforged:neoforge:${prop('neoforge_version')}"

	compileOnly(modrinth("yacl", "${prop('yacl_version')}-neoforge"))

	def availableVersions = enabled_neoforge_versions.split(',').collect { it.trim() }

	if(!availableVersions.contains(currentRootVersion) && minecraftVersion != currentRootVersion) {
		common(project(path: ":common:$currentRootVersion", configuration: 'namedElements')) { transitive false }
		shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionNeoForge'))
	} else {
		common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
		shadowBundle project(path: ":common:$subproject", configuration: 'transformProductionNeoForge')
	}
}

processResources {
	inputs.property "modId", prop('mod_id')
	inputs.property "modVersion", prop('mod_version')
	inputs.property "modName", prop('mod_name')
	inputs.property "modDescription", prop('mod_description')
	inputs.property "modAuthor", prop('mod_author')
	inputs.property "minecraftVersion", prop('minecraft_version')
	inputs.property "neoForgeVersion", prop('neoforge_version')

	String tomlFileName;

	if (stonecutter.compare(minecraftVersion, '1.20.6') < 0) {
		tomlFileName = "META-INF/mods.toml"
	} else {
		tomlFileName = "META-INF/neoforge.mods.toml"
	}

	filesMatching(tomlFileName) {
		expand "modId": prop('mod_id'),
			"modVersion": prop('mod_version'),
			"modName": prop('mod_name'),
			"modDescription": prop('mod_description'),
			"modAuthor": prop('mod_author'),
			"minecraftVersion": prop('minecraft_version'),
			"neoForgeVersion": prop('neoforge_version')
	}
}

shadowJar {
	exclude("fabric.mod.json")
	exclude("architectury.common.json")

	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

/*
remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set(null)
	atAccessWideners.add("${rootProject.mod_id}.accesswidener") // this is a path inside the mod jar
}*/

remapJar {
	input.set shadowJar.archiveFile
}

java {
	withSourcesJar()

	def javaVersion = (stonecutter.compare(stonecutter.current.version, "1.20.6") >= 0) ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

tasks.withType(JavaCompile).configureEach {
	def releaseVersion = (stonecutter.compare(stonecutter.current.version, "1.20.6") >= 0) ? 21 : 17;
	it.options.release = releaseVersion
}

repositories {
	// CurseForge
	maven { url "https://www.cursemaven.com" }

	// Modrinth
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup("maven.modrinth")
		}
	}

	// NeoForge
	maven { url 'https://maven.neoforged.net/releases/' }

	// Quilt
	maven { url "https://maven.quiltmc.org/repository/release" }

	// Mixin Extras.
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup 'com.github.llamalad7'
		}
	}

	// YACL
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.isxander.dev/snapshots" }
	maven { url 'https://thedarkcolour.github.io/KotlinForForge/' }

	// Mod Menu.
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.terraformersmc.com" }

	// Random
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

if(stonecutter.current.isActive) {
	rootProject.tasks.register("buildActiveNeoForge") {
		group = "project"
		dependsOn(tasks.named("build"))
	}
}