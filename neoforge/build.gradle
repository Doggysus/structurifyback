plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version
def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}
def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

base {
	archivesName.set("${mod_id}-neoforge-mc${minecraftVersion}")
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings loom.layered {
		it.mappings "net.fabricmc:yarn:${prop('yarn_mappings')}:v2"
		it.mappings "dev.architectury:yarn-mappings-patch-forge:${prop('yarn_mappings_patch')}"
	}

	neoForge "net.neoforged:neoforge:${prop('neoforge_version')}"

	if (minecraftVersion == "1.20.2") {
		modImplementation(modrinth("yacl", "${prop('yacl_version')}-forge"))
		//modImplementation("dev.isxander.yacl:yet-another-config-lib-forge:${prop('yacl_version')}") { transitive = false }
	} else {
		modImplementation(modrinth("yacl", "${prop('yacl_version')}-neoforge"))
		modImplementation("dev.isxander.yacl:yet-another-config-lib-neoforge:${prop('yacl_version')}") { transitive = false }
	}

	common(project(path: ":common:1.20.1", configuration: 'namedElements')) { transitive false }
	shadowBundle project(path: ":common:1.20.1", configuration: 'transformProductionNeoForge')

	common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
	shadowBundle project(path: ":common:$subproject", configuration: 'transformProductionNeoForge')

	//project.logger.error("mcminecraftVersion:" + minecraftVersion)
	//project.logger.error(minecraftVersion)
	//project.logger.error(stonecutter.active)

	/*
	def activeVersions = getRootProject().stonecutter.versions.findAll { it.isActive }
	activeVersions.each { version ->
		println "Active version: ${version.version}"
	}*/

	if(stonecutter.current.isActive) {
		//project.logger.error("YAS")
		//common(project(path: ":common:1.20.1", configuration: 'namedElements')) { transitive false }
		//shadowBundle project(path: ":common:1.20.1", configuration: 'transformProductionNeoForge')
	} else {
		//project.logger.error("NO")
		//common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
		//shadowBundle project(path: ":common:$subproject", configuration: 'transformProductionNeoForge')
	}
}

processResources {
	inputs.property "modId", prop('mod_id')
	inputs.property "modVersion", prop('mod_version')
	inputs.property "modName", prop('mod_name')
	inputs.property "modDescription", prop('mod_description')
	inputs.property "modAuthor", prop('mod_author')
	inputs.property "minecraftVersion", prop('minecraft_version')
	inputs.property "neoForgeVersion", prop('neoforge_version')

	filesMatching("META-INF/mods.toml") {
		expand "modId": prop('mod_id'),
			"modVersion": prop('mod_version'),
			"modName": prop('mod_name'),
			"modDescription": prop('mod_description'),
			"modAuthor": prop('mod_author'),
			"minecraftVersion": prop('minecraft_version'),
			"neoForgeVersion": prop('neoforge_version')
	}
}

shadowJar {
	exclude("fabric.mod.json")
	exclude("architectury.common.json")

	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

jar {
	archiveClassifier.set("dev")
}

// Doesnt work on neo
/*
remapJar {
	input.set shadowJar.archiveFile
}*/

java {
	withSourcesJar()

	if (minecraftVersion == "1.20.1" || minecraftVersion == "1.20.2" || minecraftVersion == "1.20.4") {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
	} else {
		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21
	}
}

tasks.withType(JavaCompile).configureEach {
	if (minecraftVersion == "1.20.1" || minecraftVersion == "1.20.2" || minecraftVersion == "1.20.4") {
		it.options.release = 17
	} else {
		it.options.release = 21
	}
}

repositories {
	// YACL
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.isxander.dev/snapshots" }
	maven { url 'https://thedarkcolour.github.io/KotlinForForge/' }

	// NeoForge
	maven { url 'https://maven.neoforged.net/releases/' }

	// Mod Menu.
	maven { url 'https://maven.terraformersmc.com' }

	// Mixin Extras.
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup 'com.github.llamalad7'
		}
	}

	// Modrinth
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup("maven.modrinth")
		}
	}
}