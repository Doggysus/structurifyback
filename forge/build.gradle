plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def currentRootVersion = getRootProject().stonecutter.current.version;
def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version
def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}
def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

base {
	archivesName.set("${mod_id}-forge-mc${minecraftVersion}")
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	silentMojangMappingsLicense()

	//accessWidenerPath.set(project(":common:$subproject").loom.accessWidenerPath)

	forge {
		convertAccessWideners = true
		//extraAccessWideners.add(project(":common:$subproject").loom.accessWidenerPath.get().asFile.name)
		mixinConfig "structurify-common.mixins.json"
		mixinConfig "structurify-forge.mixins.json"
	}

	runConfigs.all {
		ideConfigGenerated true
	}
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

java {
	withSourcesJar()

	if (stonecutter.compare(minecraftVersion, '1.20.6') < 0) {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
	} else {
		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21
	}
}

tasks.withType(JavaCompile).configureEach {
	if (stonecutter.compare(minecraftVersion, '1.20.6') < 0) {
		it.options.release = 17
	} else {
		it.options.release = 21
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings "net.fabricmc:yarn:${prop('yarn_mappings')}:v2"

	forge "net.minecraftforge:forge:${prop('minecraft_version')}-${prop('forge_version')}"

	modImplementation(modrinth("yacl", "${prop('yacl_version')}-forge"))
	//modImplementation("dev.isxander.yacl:yet-another-config-lib-forge:${prop('yacl_version')}") { transitive = false }
	// forgeRuntimeLibrary
	// Required
	//modImplementation modRuntimeOnly ("curse.maven:yacl-667299:5376023")
	// modApi ("dev.isxander:yet-another-config-lib:${rootProject.yet_another_config_lib_version}+${rootProject.minecraft_version}-forge")
	// modCompileOnly ("dev.isxander:yet-another-config-lib:${rootProject.yet_another_config_lib_version}+${rootProject.minecraft_version}-forge")

	// Compat
	//modCompileOnly modRuntimeOnly ("curse.maven:drp-global-datapack-317134:4573646")
	//modApi ("maven.modrinth:globalpacks:${rootProject.globalpacks_version}_forge")
	// modRuntimeOnly ("maven.modrinth:globalpacks:${rootProject.globalpacks_version}_forge")
	// modCompileOnly ("maven.modrinth:globalpacks:${rootProject.globalpacks_version}_forge")

	// include("maven.modrinth:globalpacks:${rootProject.globalpacks_version}_forge")
	// include ("dev.isxander:yet-another-config-lib:${rootProject.yet_another_config_lib_version}+${rootProject.minecraft_version}-forge")

	def availableVersions = enabled_forge_versions.split(',').collect { it.trim() }

	if(!availableVersions.contains(currentRootVersion) && minecraftVersion != currentRootVersion) {
		common(project(path: ":common:$currentRootVersion", configuration: 'namedElements')) { transitive false }
		shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionForge'))
	} else {
		common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
		shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionForge'))
	}
}

processResources {
	inputs.property "modId", mod_id
	inputs.property "modVersion", mod_version
	inputs.property "modName", mod_name
	inputs.property "modDescription", mod_description
	inputs.property "modAuthor", mod_author
	inputs.property "minecraftVersion", prop('min_minecraft_version')
	inputs.property "forgeVersion", prop('forge_version')

	filesMatching("META-INF/mods.toml") {
		expand "modId": mod_id,
			"modVersion": mod_version,
			"modName": mod_name,
			"modDescription": mod_description,
			"modAuthor": mod_author,
			"minecraftVersion": prop('min_minecraft_version'),
			"forgeVersion": prop('forge_version')
	}
}

shadowJar {
	exclude("fabric.mod.json")
	exclude("architectury.common.json")

	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

jar {
	archiveClassifier.set("dev")
}

remapJar {
	input.set shadowJar.archiveFile
}

repositories {
	// YACL
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.isxander.dev/snapshots" }
	maven { url 'https://thedarkcolour.github.io/KotlinForForge/' }

	// NeoForge
	maven { url 'https://maven.neoforged.net/releases/' }

	// Mod Menu.
	maven { url 'https://maven.terraformersmc.com' }

	// Mixin Extras.
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup 'com.github.llamalad7'
		}
	}

	// Modrinth
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup("maven.modrinth")
		}
	}
}

if(stonecutter.current.isActive) {
	rootProject.tasks.register("buildActiveForge") {
		group = "project"
		dependsOn(tasks.named("build"))
	}
}