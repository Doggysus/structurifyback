plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "structurized.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
	forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
	inputs.property "modId", rootProject.mod_id
	inputs.property "modVersion", rootProject.mod_version
	inputs.property "modName", rootProject.mod_name
	inputs.property "modDescription", rootProject.mod_description
	inputs.property "modAuthor", rootProject.mod_author
	inputs.property "minecraftVersion", rootProject.minecraft_version
	inputs.property "forgeVersion", rootProject.forge_version

	filesMatching("META-INF/mods.toml") {
		expand "modId": rootProject.mod_id,
			"modVersion": rootProject.mod_version,
			"modName": rootProject.mod_name,
			"modDescription": rootProject.mod_description,
			"modAuthor": rootProject.mod_author,
			"minecraftVersion": rootProject.minecraft_version,
			"forgeVersion": rootProject.forge_version
	}
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
