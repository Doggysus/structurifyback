plugins {
	id 'java'
	id 'idea'
	id 'dev.architectury.loom'
	id 'architectury-plugin'
	id 'com.github.johnrengelman.shadow'
}

def isClient = project.gradle.startParameter.taskNames.any { it.contains('runClient') }
def isServer = project.gradle.startParameter.taskNames.any { it.contains('runServer') }
def currentRootVersion = getRootProject().stonecutter.current.version;
def subproject = stonecutter.current.project
def minecraftVersion = stonecutter.current.version
def modrinth(String name, String version) {
	return "maven.modrinth:$name:$version"
}
def prop(String name) {
	return rootProject.project(stonecutter.current.project).property(name).toString()
}

base {
	archivesName.set("${mod_id}-forge-mc${minecraftVersion}-${mod_version}")
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	silentMojangMappingsLicense()

	accessWidenerPath.set(project(":common:$subproject").loom.accessWidenerPath)

	forge {
		convertAccessWideners = true
		extraAccessWideners.add(loom.accessWidenerPath.get().asFile.name)

		mixinConfig "structurify-common.mixins.json"
	}

	runConfigs.all {
		ideConfigGenerated true
	}
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}

	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
	targetCompatibility = JavaVersion.toVersion(prop('mod_java_version'))
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.getRelease().set(prop('mod_java_version') as Integer)
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings loom.layered {
		it.mappings "net.fabricmc:yarn:${prop('yarn_mappings')}:v2"
		if (stonecutter.compare(minecraftVersion, '1.20.4') == 0) {
			it.mappings "dev.architectury:yarn-mappings-patch-forge:${prop('yarn_mappings_patch')}"
		} else if (stonecutter.compare(minecraftVersion, '1.20.6') >= 0) {
			it.mappings "dev.architectury:yarn-mappings-patch-neoforge:${prop('yarn_mappings_patch')}"
		}
	}

	forge "net.minecraftforge:forge:${prop('minecraft_version')}-${prop('forge_version')}"

	if(isClient) {
		// YetAnotherConfigLib (https://docs.isxander.dev/yet-another-config-lib)
		if (minecraftVersion == '1.20.2') {
			modImplementation(modrinth("yacl", "${prop('yacl_version')}-forge"))
		} else {
			// Temp disable, its not working for forge
			//modImplementation("dev.isxander:yet-another-config-lib:${prop('yacl_version')}-forge")
		}
	}

	def availableVersions = stonecutter_enabled_forge_versions.split(',').collect { it.trim() }

	if(!availableVersions.contains(currentRootVersion) && minecraftVersion != currentRootVersion) {
		common(project(path: ":common:$currentRootVersion", configuration: 'namedElements')) { transitive false }
		shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionForge')) { transitive false }
	} else {
		common(project(path: ":common:$subproject", configuration: 'namedElements')) { transitive false }
		shadowBundle(project(path: ":common:$subproject", configuration: 'transformProductionForge')) { transitive false }
	}
}

processResources {
	def expandProps = [
		"modJavaVersion"     : prop('mod_java_version'),
		'modId'              : mod_id,
		'modName'            : mod_name,
		'modDescription'     : mod_description,
		'modVersion'         : mod_version,
		'modAuthor'          : mod_author,
		"minecraftVersion"   : prop('minecraft_version'),
		"minMinecraftVersion": prop('min_minecraft_version'),
		"forgeVersion"       : prop('forge_version')
	]

	filesMatching(['pack.mcmeta', 'META-INF/mods.toml', '*.mixins.json']) {
		expand expandProps
	}

	inputs.properties(expandProps)
}

shadowJar {
	exclude("fabric.mod.json")
	exclude("architectury.common.json")

	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

jar {
	archiveClassifier.set("dev")
}

remapJar {
	injectAccessWidener.set(true)
	input.set(shadowJar.archiveFile)
	dependsOn(shadowJar)
	archiveClassifier.set(null)
}

repositories {
	// YACL
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.isxander.dev/snapshots" }
	maven { url 'https://thedarkcolour.github.io/KotlinForForge/' }
	maven { url "https://maven.quiltmc.org/repository/release" }

	// NeoForge
	maven { url 'https://maven.neoforged.net/releases/' }

	// Mod Menu.
	maven { url 'https://maven.terraformersmc.com' }

	// Mixin Extras.
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup 'com.github.llamalad7'
		}
	}

	// Modrinth
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup("maven.modrinth")
		}
	}
}

if(stonecutter.current.isActive) {
	rootProject.tasks.register("buildActiveForge") {
		group = "project"
		dependsOn(tasks.named("build"))
	}
}